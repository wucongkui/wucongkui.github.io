<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/09/25/blogbuild/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2><h2 id="在Mac环境下用Hexo-GitHub搭建个人博客的方法"><a href="#在Mac环境下用Hexo-GitHub搭建个人博客的方法" class="headerlink" title="在Mac环境下用Hexo+GitHub搭建个人博客的方法"></a>在Mac环境下用Hexo+GitHub搭建个人博客的方法</h2><p>前言</p>
<p>软件介绍：</p>
<p>Home-brew：是一款MacOS平台下的软件包管理工具，可实现软件的安装、卸载、更新、查看、搜索等功能。可以通过简单的指令对软件进行管理，类似于Ubuntu终端上的apt-get命令。但并非所有软件都可以安装，它只是能安装一些系统缺省的软件包，例如：wget、nginx、mysql等。但随着版本的更新，支持安装第三方数据源的软件包，以后支持安装的软件包会更多、更丰富。</p>
<p>Git:  全称分布式版本控制系统，免费且开源，可以有效高速的处理从小到大的项目版本管理。可以使用git命令将代码提交到GitHub。</p>
<p>Nvm：全名node.js version management，是Mac下的一种node的版本管理工具。类似于ruby的rum、python的pyenu工具。</p>
<p>node.js: 是一个Javascript运行环境。（node.js于javascript的区别：JavaScript主要用于前端的编程语言，node.js主要应用于后端，可以快速构建网络服务及应用平台）</p>
<p>Hexo：静态博客生成器，编写markdown文件，快速生成静态网页。</p>
<p>GitHub：代码托管共享平台，世界上最大的开源软件社区，支持全平台全设备。GitHub pages可为项目建立静态主页。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="一、安装homebrew"><a href="#一、安装homebrew" class="headerlink" title="一、安装homebrew"></a>一、安装homebrew</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开终端，执行命令：&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)&quot;</span><br><span class="line">查看是否安装成功：brew version</span><br><span class="line">显示如下图则安装成功。</span><br></pre></td></tr></table></figure>

<h3 id="二、安装git"><a href="#二、安装git" class="headerlink" title="二、安装git"></a>二、安装git</h3><pre><code>   通过brew命令安装Git：brew install git
   检查是否安装成功：git —version</code></pre>
<h3 id="三、安装nvm"><a href="#三、安装nvm" class="headerlink" title="三、安装nvm"></a>三、安装nvm</h3><pre><code>   Brew命令安装nvm
   brew install nvm

   配置nvm（安装成功后会提示如何配置）
   创建.nvm文件夹命令
   mkdir ~/.nvm

   ~/.bash_profile或者 ~/.zshrc中添加下面命令
   export NVM_DIR=&quot;$HOME/.nvm&quot;
   [ -s &quot;/usr/local/opt/nvm/nvm.sh&quot; ] &amp;&amp; . &quot;/usr/local/opt/nvm/nvm.sh&quot;  # This loads nvm
   [ -s &quot;/usr/local/opt/nvm/etc/bash_completion&quot; ] &amp;&amp; . &quot;/usr/local/opt/nvm/etc/ bash_completion&quot;  # This loads nvm bash_completion

   source一下
   source ~/.zshrc</code></pre>
<h3 id="四、安装node"><a href="#四、安装node" class="headerlink" title="四、安装node"></a>四、安装node</h3><pre><code>    通过nvm安装node
    nvm ls-remote                           #查看node所有版本
    nvm install v12.18.3                  #安装你要的版本
    nvm use v12.18.3                      #使用指定的版本
    nvm alias default v12.18.3       #默认版本，每次打开终端，都自动使用该版本

    检查是否安装成功
    node -v
    npm -v</code></pre>
<h3 id="五、安装配置hexo"><a href="#五、安装配置hexo" class="headerlink" title="五、安装配置hexo"></a>五、安装配置hexo</h3><pre><code>    利用npm命令安装
    npm install -g hexo-cli           #-g参数表示全局安装

    初始化hexo 

    创建博客存放文件夹
    mkdir wucongkui-blog          #目录名称和位置可以随意制定

    hexo初始化
    hexo init wucongkui-blog
    cd wucongkui-blog

    hexo下载配置
    https://hexo.io/themes/ 上有很多主题，可以用git clone的方式自选喜欢的主题，放在/themes下即可。也可以分支这个主题，按自己的想法二次开发。我刚开始用的默认landscape主题，下面是最常用的next主题设置方法。
    cd wucongkui-blog
    git clone https://github.com/theme-next/hexo-theme-next themes/next 

    在_config_yml文件中配置博客名字、作者和主题等信息。其中language信息可在所选主题的language文件夹下查看，根据自己需要选择相应语言。

    添加文章
    新建markdown格式文件，安装相应的格式写文章，然后将文件放到source/_posts路径下

    本地启动，出现下面图片内容表示本地启动成功。
    hexo g              #对应下列hexo命令查看内容
    hexo s    
    ￼
    浏览器访问图片中地址即可访问博客。
</code></pre>
<h3 id="六、申请GitHub账号"><a href="#六、申请GitHub账号" class="headerlink" title="六、申请GitHub账号"></a>六、申请GitHub账号</h3><pre><code>    https://github.com/ 官网上注册账号并登录。

    创建一个新的仓库，其中库名最好与用户名同名。我的库名是wucongkui.github.io，然后点击creat repositorya按钮完成创建。</code></pre>
<h3 id="七、生成ssh密钥连接github"><a href="#七、生成ssh密钥连接github" class="headerlink" title="七、生成ssh密钥连接github"></a>七、生成ssh密钥连接github</h3><pre><code>    生成ssh密钥：
    ls ~/.ssh/               #检查本机已存在的ssh密钥，下图表示已经配置过了。
￼
    若没有配置过，执行以下命令：
    git config -global user.name ‘xxxxx’                       #用户名
    git config -global user.email ‘xxxx@xxx.xxx’         #最好跟注册GitHub的邮箱为同一邮箱

    生成密钥命令
    ssh-keygen -t rsa -C ‘上面的邮箱‘
    接着按三个回车，则得到上图中的文件。

    复制密钥命令：
    cat id_rsa.pub                      #此时密钥内容已经复制到你的粘贴板上了

    关联GitHub：
    在GitHub上打开setting，点击ssh and gpg keys，然后建立一个新ssh key，将粘贴板内容复制到对话框内，add key。弹出窗口并输入GitHub密码即完成。最后的结果如下图所示。

    测试：
    在终端输入命令ssh -T git@github.com，若显示以下内容表示已经完成配置了。</code></pre>
<h3 id="八、通过GitHub网址访问博客"><a href="#八、通过GitHub网址访问博客" class="headerlink" title="八、通过GitHub网址访问博客"></a>八、通过GitHub网址访问博客</h3><pre><code> 现在就可以登陆wucongkui.github.io访问博客了！</code></pre>
]]></content>
      <categories>
        <category>干燥工厂</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/16/test/</url>
    <content><![CDATA[<hr>
<h2 id="title-最爱的一首诗"><a href="#title-最爱的一首诗" class="headerlink" title="title: 最爱的一首诗"></a>title: 最爱的一首诗</h2><h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p><code> 个人博客</code></p>
<h3 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h3><p><code> 武聪魁</code></p>
<h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p><code>2020年9月16日</code></p>
<h3 id="地点"><a href="#地点" class="headerlink" title="地点"></a>地点</h3><p><code> 博杜安公司</code></p>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;一只孤独的船&gt;&gt;</span><br><span class="line">莱蒙托夫</span><br><span class="line">一只船孤独的航行在海上，</span><br><span class="line">它既不寻求幸福，</span><br><span class="line">也不逃避幸福，</span><br><span class="line">他只是向前航行，</span><br><span class="line">底下是沉静碧蓝的大海，</span><br><span class="line">而头顶是金色的太阳。</span><br><span class="line">将要直面的，</span><br><span class="line">与已成过往的，</span><br><span class="line">较之于深埋于他内心的，</span><br><span class="line">皆为微沫。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
</search>
